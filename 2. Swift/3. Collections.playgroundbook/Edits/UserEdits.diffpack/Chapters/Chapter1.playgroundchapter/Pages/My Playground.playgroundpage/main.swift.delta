<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/****************************************************************************
 Arrays
 
 An array stores values of the same type in an ordered list. 
 The same value can appear in an array multiple times at different positions.
****************************************************************************/

//Empty Array
var someInts: [Int] = []
print("someInts is of type [Int] with \(someInts.count) items.")
someInts.append(3)
print("someInts is of type [Int] with \(someInts.count) items.")
someInts = []
print("someInts is of type [Int] with \(someInts.count) items.")


//Creating an Array with a Default Value
var threeDoubles = Array(repeating: 0.0, count: 3)
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
var sixDoubles = threeDoubles + anotherThreeDoubles
print(threeDoubles)
print(anotherThreeDoubles)
print(sixDoubles)


//Creating an Array with an Array Literal
var shoppingList: [String] = ["Eggs", "Milk"]
var shoppingList1 = ["Eggs", "Milk"]
var shoppingList2: [Any] = ["Eggs", 0]
print(shoppingList)
print(shoppingList1)
print(shoppingList2)


//Accessing and Modifying an Array
print("The shopping list contains \(shoppingList.count) items.")

if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list isn't empty.")
}

shoppingList.append("Flour")
print(shoppingList)

shoppingList += ["Baking Powder"]
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
print(shoppingList)

var firstItem = shoppingList[0]
print(firstItem)

shoppingList[0] = "Six eggs"
print(shoppingList)

shoppingList[4...6] = ["Bananas", "Apples"]
print(shoppingList)

shoppingList.insert("Maple Syrup", at: 0)
print(shoppingList)

let mapleSyrup = shoppingList.remove(at: 0)
print(mapleSyrup)

let apples = shoppingList.removeLast()
print(apples)

print(shoppingList)

//Iterating Over an Array
for item in shoppingList {
    print(item)
}

for (index, value) in shoppingList.enumerated() {
    print("Item \(index + 1): \(value)")
}





























/****************************************************************************
 Sets
 
 A set stores distinct values of the same type in a collection with no defined
 ordering. You can use a set instead of an array when the order of items isn‚Äôt
 important, or when you need to ensure that an item only appears once.
 ****************************************************************************/

//Creating and Initializing an Empty Set
var letters = Set&lt;Character&gt;()
print("letters is of type Set&lt;Character&gt; with \(letters.count) items.")

letters.insert("a")
print(letters)
letters = []
print(letters)


//Creating a Set with an Array Literal
var favoriteGenres: Set&lt;String&gt; = ["Rock", "Classical", "Hip hop"]
print(favoriteGenres)
var favoriteGenres1: Set = ["Rock", "Classical", "Hip hop"]
print(favoriteGenres1)


//Accessing and Modifying a Set
print("I have \(favoriteGenres.count) favorite music genres.")

if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}

favoriteGenres.insert("Jazz")
print(favoriteGenres)


if let removedGenre = favoriteGenres.remove("Rock") {
    print("\(removedGenre)? I'm over it.")
} else {
    print("I never much cared for that.")
}

if favoriteGenres.contains("Funk") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
}


//Iterating Over a Set
for genre in favoriteGenres {
    print("\(genre)")
}


//Set Operations
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]

let u = oddDigits.union(evenDigits).sorted()
print(u)

let i = oddDigits.intersection(evenDigits).sorted()
print(i)

let s = oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
print(s)

let sy = oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
print(sy)



//Set Membership and Equality
let houseAnimals: Set = ["üê∂", "üê±"]
let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
let cityAnimals: Set = ["üê¶", "üê≠"]

houseAnimals.isSubset(of: farmAnimals)     //true
farmAnimals.isSuperset(of: houseAnimals)   //true
farmAnimals.isDisjoint(with: cityAnimals)  //true



















































/****************************************************************************
 Dictionaries
 
 A dictionary stores associations between keys of the same type and values 
 of the same type in a collection with no defined ordering. Each value is
 associated with a unique key, which acts as an identifier for that value 
 within the dictionary. 
 ****************************************************************************/

//Creating an Empty Dictionary
var namesOfIntegers: [Int: String] = [:]
print(namesOfIntegers)

namesOfIntegers[16] = "sixteen"
print(namesOfIntegers)

namesOfIntegers = [:]
print(namesOfIntegers)



//Creating a Dictionary with a Dictionary Literal
var airports: [String: String] = ["YYZ": "Toronto Pearson",
                                  "DUB": "Dublin"]
var airports1 = ["YYZ": "Toronto Pearson",
                 "DUB": "Dublin"]



//Accessing and Modifying a Dictionary
print("The airports dictionary contains \(airports.count) items.")

if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary isn't empty.")
}

airports["LHR"] = "London"
print(airports)


if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    print("The old value for DUB was \(oldValue).")
}


if let airportName = airports["DUB"] {
    print("The name of the airport is \(airportName).")
} else {
    print("That airport isn't in the airports dictionary.")
}

airports["APL"] = "Apple International"
print(airports)

airports["APL"] = nil
print(airports)


if let removedValue = airports.removeValue(forKey: "DUB") {
    print("The removed airport's name is \(removedValue).")
} else {
    print("The airports dictionary doesn't contain a value for DUB.")
}



//Iterating Over a Dictionary
for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}

for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}

for airportName in airports.values {
    print("Airport name: \(airportName)")
}

let airportCodes = [String](airports.keys)
print(airportCodes)

let airportNames = [String](airports.values)
print(airportNames)

</string>
			<key>ModifiedRange</key>
			<string>{0, 6421}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
