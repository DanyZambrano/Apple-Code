<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/****************************************************************************
 Deinitialization
 
 A deinitializer is called immediately before a class instance is deallocated.
 You write deinitializers with the deinit keyword, similar to how initializers
 are written with the init keyword.
 Deinitializers are only available on class types.
 
 deinit {
 // perform the deinitialization
 }
 
 
 
 Swift automatically deallocates your instances when they’re no longer needed,
 to free up resources. Swift handles the memory management of instances through
 automatic reference counting (ARC), as described in Automatic Reference Counting. Typically you don’t need to perform manual cleanup when your instances are deallocated.
 However, when you are working with your own resources, you might need to perform some
 additional cleanup yourself. For example, if you create a custom class to open a file
 and write some data to it, you might need to close the file before the class instance
 is deallocated.
 
 ****************************************************************************/


class Bank {
    static var coinsInBank = 10_000
    static func distribute(coins numberOfCoinsRequested: Int) -&gt; Int {
        let numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)
        coinsInBank -= numberOfCoinsToVend
        return numberOfCoinsToVend
    }
    static func receive(coins: Int) {
        coinsInBank += coins
    }
}


class Player {
    var coinsInPurse: Int
    init(coins: Int) {
        coinsInPurse = Bank.distribute(coins: coins)
    }
    func win(coins: Int) {
        coinsInPurse += Bank.distribute(coins: coins)
    }
    deinit {
        Bank.receive(coins: coinsInPurse)
    }
}






var playerOne: Player? = Player(coins: 100)
print("A new player has joined the game with \(playerOne!.coinsInPurse) coins")
print("There are now \(Bank.coinsInBank) coins left in the bank")


playerOne!.win(coins: 2_000)
print("PlayerOne won 2000 coins &amp; now has \(playerOne!.coinsInPurse) coins")
print("The bank now only has \(Bank.coinsInBank) coins left")


playerOne = nil                          
print("PlayerOne has left the game")
print("The bank now has \(Bank.coinsInBank) coins")

/* The player has now left the game. This is indicated by setting the optional playerOne variable to nil,
 meaning “no Player instance.” At the point that this happens, the playerOne variable’s reference to the 
 Player instance is broken. No other properties or variables are still referring to the Player instance, 
 and so it’s deallocated in order to free up its memory. Just before this happens, its deinitializer is 
 called automatically, and its coins are returned to the bank. */
</string>
			<key>ModifiedRange</key>
			<string>{0, 2706}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
