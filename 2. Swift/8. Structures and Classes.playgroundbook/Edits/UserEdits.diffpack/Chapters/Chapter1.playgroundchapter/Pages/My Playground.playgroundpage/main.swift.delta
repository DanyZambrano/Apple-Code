<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/****************************************************************************
 Structures and Classes
 
 Structures and classes are general-purpose, flexible constructs that become 
 the building blocks of your program’s code. You define properties and methods
 to add functionality to your structures and classes using the same syntax you
 use to define constants, variables, and functions.
 
 Structs are value type whereas Classes are reference type
 
 use struct for plain-old-data structures without any class-like features. 
 use class when you make use of features such as private or protected members,
 non-default constructors and operators.
 ****************************************************************************/



//Definition Syntax
struct SomeStructure {
    // structure definition goes here
}

class SomeClass {
    // class definition goes here
}


//Accessing Properties
struct Resolution {
    var width = 0
    var height = 0
}

class VideoMode {
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}

let someResolution = Resolution()
let someVideoMode = VideoMode()

print("The width of someResolution is \(someResolution.width)")
print("The width of someVideoMode is \(someVideoMode.resolution.width)")

someVideoMode.resolution.width = 1280
print("The width of someVideoMode is now \(someVideoMode.resolution.width)")
















/*Structures and Enumerations Are Value Types
A value type is a type whose value is copied when it’s assigned 
to a variable or constant, or when it’s passed to a function.*/


let hd = Resolution(width: 1920, height: 1080)
var cinema = hd

cinema.width = 2048
print("cinema is now \(cinema.width) pixels wide")
print("hd is still \(hd.width) pixels wide")



enum CompassPoint {
    case north, south, east, west
    mutating func turnNorth() {
        self = .north
    }
}

var currentDirection = CompassPoint.west
let rememberedDirection = currentDirection
currentDirection.turnNorth()

print("The current direction is \(currentDirection)")
print("The remembered direction is \(rememberedDirection)")














/* Classes Are Reference Types
 Unlike value types, reference types are not copied when they’re assigned
 to a variable or constant, or when they’re passed to a function. 
 Rather than a copy, a reference to the same existing instance is used. */

let tenEighty = VideoMode()
tenEighty.resolution = hd
tenEighty.interlaced = true
tenEighty.name = "1080i"
tenEighty.frameRate = 25.0


let alsoTenEighty = tenEighty
alsoTenEighty.frameRate = 30.0


print("The frameRate property of tenEighty is now \(alsoTenEighty.frameRate)")
print("The frameRate property of tenEighty is now \(tenEighty.frameRate)")









/*  Identity Operators
 Identical to (===)
 Not identical to (!==) */

if tenEighty === alsoTenEighty {
    print("tenEighty and alsoTenEighty refer to the same VideoMode instance.")
}












</string>
			<key>ModifiedRange</key>
			<string>{0, 2946}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
